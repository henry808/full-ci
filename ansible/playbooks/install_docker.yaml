---
# This playbook installs and configures a web server on remote hosts using a python flask app.
# Set hosts to prod_webservers, test_webservers, or dev_webservers
# cd ansible
# ansible-playbook -i inventory/hosts.yaml playbooks/install_docker.yaml
- name: Install Docker
  hosts: dev_webservers
  become: true  # Adds sudo privileges for all commands below.

  # environment:
  #   ENV: "{{ hostvars[inventory_hostname].env }}"

  tasks:
    # Update apt
    - name: Update apt
      apt:
        update_cache: yes

    # Set ENV to prod, test, dev, etc. (replace line in file)
    - name: Set ENV system-wide
      lineinfile:
        path: /etc/environment
        regexp: '^ENV='
        line: 'ENV={{ hostvars[inventory_hostname].env }}'
        state: present
    # Source file and print ENV.
    - name: Read environment variables from /etc/environment
      shell: . /etc/environment && echo $ENV
      register: env_output

    - name: Display ENV value
      debug:
        var: env_output.stdout

    # Install packages needed for adding Docker repo over HTTPS.
    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https 
          - ca-certificates
          - curl
          - software-properties-common
        state: present
        update_cache: yes
      
    # Add Docker's official GPG key to verify packages.
    - name: Add Docker's GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    # Add Docker's stable repository for installing packages.
    - name: Add Docker APT repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present  

    # Install latest version of Docker CE.
    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    # Add ubuntu to the docker group to manage Docker.
    - name: Add ubuntu to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    # Start Docker and enable it to start on boot.
    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    # Test to see if docker is installed.
    - name: Test Docker install
      command: docker --version
      register: docker_version
      ignore_errors: true

    # Print version if docker is installed.
    - name: Print Docker version  
      debug:
        msg: "Docker version is {{ docker_version.stdout }}"
      when: docker_version.rc == 0

    # print error message if docker is not installed.
    - name: Print failure message
      debug: 
        msg: "Docker not installed. Install failed."
      when: docker_version.rc != 0

    # install pyhton3 and pip3
    - name: Install Python and pip
      apt:
        name: 
          - python3
          - python3-pip
        state: present